// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"runtime/debug"

	mock "github.com/stretchr/testify/mock"
)

// NewDebugger creates a new instance of Debugger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDebugger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Debugger {
	mock := &Debugger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Debugger is an autogenerated mock type for the Debugger type
type Debugger struct {
	mock.Mock
}

type Debugger_Expecter struct {
	mock *mock.Mock
}

func (_m *Debugger) EXPECT() *Debugger_Expecter {
	return &Debugger_Expecter{mock: &_m.Mock}
}

// ReadBuildInfo provides a mock function for the type Debugger
func (_mock *Debugger) ReadBuildInfo() (*debug.BuildInfo, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadBuildInfo")
	}

	var r0 *debug.BuildInfo
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (*debug.BuildInfo, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *debug.BuildInfo); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*debug.BuildInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// Debugger_ReadBuildInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBuildInfo'
type Debugger_ReadBuildInfo_Call struct {
	*mock.Call
}

// ReadBuildInfo is a helper method to define mock.On call
func (_e *Debugger_Expecter) ReadBuildInfo() *Debugger_ReadBuildInfo_Call {
	return &Debugger_ReadBuildInfo_Call{Call: _e.mock.On("ReadBuildInfo")}
}

func (_c *Debugger_ReadBuildInfo_Call) Run(run func()) *Debugger_ReadBuildInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Debugger_ReadBuildInfo_Call) Return(info *debug.BuildInfo, ok bool) *Debugger_ReadBuildInfo_Call {
	_c.Call.Return(info, ok)
	return _c
}

func (_c *Debugger_ReadBuildInfo_Call) RunAndReturn(run func() (*debug.BuildInfo, bool)) *Debugger_ReadBuildInfo_Call {
	_c.Call.Return(run)
	return _c
}
