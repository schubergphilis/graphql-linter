// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/schubergphilis/graphql-linter/internal/app/graphql-linter/data"
	mock "github.com/stretchr/testify/mock"
)

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

type Storer_Expecter struct {
	mock *mock.Mock
}

func (_m *Storer) EXPECT() *Storer_Expecter {
	return &Storer_Expecter{mock: &_m.Mock}
}

// FindAndLogGraphQLSchemaFiles provides a mock function for the type Storer
func (_mock *Storer) FindAndLogGraphQLSchemaFiles() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAndLogGraphQLSchemaFiles")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Storer_FindAndLogGraphQLSchemaFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAndLogGraphQLSchemaFiles'
type Storer_FindAndLogGraphQLSchemaFiles_Call struct {
	*mock.Call
}

// FindAndLogGraphQLSchemaFiles is a helper method to define mock.On call
func (_e *Storer_Expecter) FindAndLogGraphQLSchemaFiles() *Storer_FindAndLogGraphQLSchemaFiles_Call {
	return &Storer_FindAndLogGraphQLSchemaFiles_Call{Call: _e.mock.On("FindAndLogGraphQLSchemaFiles")}
}

func (_c *Storer_FindAndLogGraphQLSchemaFiles_Call) Run(run func()) *Storer_FindAndLogGraphQLSchemaFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storer_FindAndLogGraphQLSchemaFiles_Call) Return(strings []string, err error) *Storer_FindAndLogGraphQLSchemaFiles_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *Storer_FindAndLogGraphQLSchemaFiles_Call) RunAndReturn(run func() ([]string, error)) *Storer_FindAndLogGraphQLSchemaFiles_Call {
	_c.Call.Return(run)
	return _c
}

// LintSchemaFiles provides a mock function for the type Storer
func (_mock *Storer) LintSchemaFiles(schemaFiles []string) (int, int, []data.DescriptionError) {
	ret := _mock.Called(schemaFiles)

	if len(ret) == 0 {
		panic("no return value specified for LintSchemaFiles")
	}

	var r0 int
	var r1 int
	var r2 []data.DescriptionError
	if returnFunc, ok := ret.Get(0).(func([]string) (int, int, []data.DescriptionError)); ok {
		return returnFunc(schemaFiles)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) int); ok {
		r0 = returnFunc(schemaFiles)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]string) int); ok {
		r1 = returnFunc(schemaFiles)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func([]string) []data.DescriptionError); ok {
		r2 = returnFunc(schemaFiles)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]data.DescriptionError)
		}
	}
	return r0, r1, r2
}

// Storer_LintSchemaFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LintSchemaFiles'
type Storer_LintSchemaFiles_Call struct {
	*mock.Call
}

// LintSchemaFiles is a helper method to define mock.On call
//   - schemaFiles
func (_e *Storer_Expecter) LintSchemaFiles(schemaFiles interface{}) *Storer_LintSchemaFiles_Call {
	return &Storer_LintSchemaFiles_Call{Call: _e.mock.On("LintSchemaFiles", schemaFiles)}
}

func (_c *Storer_LintSchemaFiles_Call) Run(run func(schemaFiles []string)) *Storer_LintSchemaFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Storer_LintSchemaFiles_Call) Return(n int, n1 int, descriptionErrors []data.DescriptionError) *Storer_LintSchemaFiles_Call {
	_c.Call.Return(n, n1, descriptionErrors)
	return _c
}

func (_c *Storer_LintSchemaFiles_Call) RunAndReturn(run func(schemaFiles []string) (int, int, []data.DescriptionError)) *Storer_LintSchemaFiles_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function for the type Storer
func (_mock *Storer) LoadConfig() (*data.LinterConfig, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 *data.LinterConfig
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*data.LinterConfig, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *data.LinterConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.LinterConfig)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Storer_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type Storer_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *Storer_Expecter) LoadConfig() *Storer_LoadConfig_Call {
	return &Storer_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *Storer_LoadConfig_Call) Run(run func()) *Storer_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storer_LoadConfig_Call) Return(linterConfig *data.LinterConfig, err error) *Storer_LoadConfig_Call {
	_c.Call.Return(linterConfig, err)
	return _c
}

func (_c *Storer_LoadConfig_Call) RunAndReturn(run func() (*data.LinterConfig, error)) *Storer_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}
