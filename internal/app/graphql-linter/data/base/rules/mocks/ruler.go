// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/schubergphilis/graphql-linter/internal/app/graphql-linter/data/base/models"
	mock "github.com/stretchr/testify/mock"
	"github.com/wundergraph/graphql-go-tools/v2/pkg/ast"
)

// NewRuler creates a new instance of Ruler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Ruler {
	mock := &Ruler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Ruler is an autogenerated mock type for the Ruler type
type Ruler struct {
	mock.Mock
}

type Ruler_Expecter struct {
	mock *mock.Mock
}

func (_m *Ruler) EXPECT() *Ruler_Expecter {
	return &Ruler_Expecter{mock: &_m.Mock}
}

// EnumValuesSortedAlphabetically provides a mock function for the type Ruler
func (_mock *Ruler) EnumValuesSortedAlphabetically(doc *ast.Document, modelsLinterConfig *models.LinterConfig, schemaString string, schemaPath string) []models.DescriptionError {
	ret := _mock.Called(doc, modelsLinterConfig, schemaString, schemaPath)

	if len(ret) == 0 {
		panic("no return value specified for EnumValuesSortedAlphabetically")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, *models.LinterConfig, string, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, modelsLinterConfig, schemaString, schemaPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_EnumValuesSortedAlphabetically_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnumValuesSortedAlphabetically'
type Ruler_EnumValuesSortedAlphabetically_Call struct {
	*mock.Call
}

// EnumValuesSortedAlphabetically is a helper method to define mock.On call
//   - doc
//   - modelsLinterConfig
//   - schemaString
//   - schemaPath
func (_e *Ruler_Expecter) EnumValuesSortedAlphabetically(doc interface{}, modelsLinterConfig interface{}, schemaString interface{}, schemaPath interface{}) *Ruler_EnumValuesSortedAlphabetically_Call {
	return &Ruler_EnumValuesSortedAlphabetically_Call{Call: _e.mock.On("EnumValuesSortedAlphabetically", doc, modelsLinterConfig, schemaString, schemaPath)}
}

func (_c *Ruler_EnumValuesSortedAlphabetically_Call) Run(run func(doc *ast.Document, modelsLinterConfig *models.LinterConfig, schemaString string, schemaPath string)) *Ruler_EnumValuesSortedAlphabetically_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(*models.LinterConfig), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Ruler_EnumValuesSortedAlphabetically_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_EnumValuesSortedAlphabetically_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_EnumValuesSortedAlphabetically_Call) RunAndReturn(run func(doc *ast.Document, modelsLinterConfig *models.LinterConfig, schemaString string, schemaPath string) []models.DescriptionError) *Ruler_EnumValuesSortedAlphabetically_Call {
	_c.Call.Return(run)
	return _c
}

// FieldsAreCamelCased provides a mock function for the type Ruler
func (_mock *Ruler) FieldsAreCamelCased(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for FieldsAreCamelCased")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_FieldsAreCamelCased_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FieldsAreCamelCased'
type Ruler_FieldsAreCamelCased_Call struct {
	*mock.Call
}

// FieldsAreCamelCased is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) FieldsAreCamelCased(doc interface{}, schemaString interface{}) *Ruler_FieldsAreCamelCased_Call {
	return &Ruler_FieldsAreCamelCased_Call{Call: _e.mock.On("FieldsAreCamelCased", doc, schemaString)}
}

func (_c *Ruler_FieldsAreCamelCased_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_FieldsAreCamelCased_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_FieldsAreCamelCased_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_FieldsAreCamelCased_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_FieldsAreCamelCased_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_FieldsAreCamelCased_Call {
	_c.Call.Return(run)
	return _c
}

// InputObjectFieldsSortedAlphabetically provides a mock function for the type Ruler
func (_mock *Ruler) InputObjectFieldsSortedAlphabetically(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for InputObjectFieldsSortedAlphabetically")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_InputObjectFieldsSortedAlphabetically_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputObjectFieldsSortedAlphabetically'
type Ruler_InputObjectFieldsSortedAlphabetically_Call struct {
	*mock.Call
}

// InputObjectFieldsSortedAlphabetically is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) InputObjectFieldsSortedAlphabetically(doc interface{}, schemaString interface{}) *Ruler_InputObjectFieldsSortedAlphabetically_Call {
	return &Ruler_InputObjectFieldsSortedAlphabetically_Call{Call: _e.mock.On("InputObjectFieldsSortedAlphabetically", doc, schemaString)}
}

func (_c *Ruler_InputObjectFieldsSortedAlphabetically_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_InputObjectFieldsSortedAlphabetically_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_InputObjectFieldsSortedAlphabetically_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_InputObjectFieldsSortedAlphabetically_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_InputObjectFieldsSortedAlphabetically_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_InputObjectFieldsSortedAlphabetically_Call {
	_c.Call.Return(run)
	return _c
}

// InputObjectValuesCamelCased provides a mock function for the type Ruler
func (_mock *Ruler) InputObjectValuesCamelCased(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for InputObjectValuesCamelCased")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_InputObjectValuesCamelCased_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputObjectValuesCamelCased'
type Ruler_InputObjectValuesCamelCased_Call struct {
	*mock.Call
}

// InputObjectValuesCamelCased is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) InputObjectValuesCamelCased(doc interface{}, schemaString interface{}) *Ruler_InputObjectValuesCamelCased_Call {
	return &Ruler_InputObjectValuesCamelCased_Call{Call: _e.mock.On("InputObjectValuesCamelCased", doc, schemaString)}
}

func (_c *Ruler_InputObjectValuesCamelCased_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_InputObjectValuesCamelCased_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_InputObjectValuesCamelCased_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_InputObjectValuesCamelCased_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_InputObjectValuesCamelCased_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_InputObjectValuesCamelCased_Call {
	_c.Call.Return(run)
	return _c
}

// MissingArgumentDescriptions provides a mock function for the type Ruler
func (_mock *Ruler) MissingArgumentDescriptions(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for MissingArgumentDescriptions")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_MissingArgumentDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MissingArgumentDescriptions'
type Ruler_MissingArgumentDescriptions_Call struct {
	*mock.Call
}

// MissingArgumentDescriptions is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) MissingArgumentDescriptions(doc interface{}, schemaString interface{}) *Ruler_MissingArgumentDescriptions_Call {
	return &Ruler_MissingArgumentDescriptions_Call{Call: _e.mock.On("MissingArgumentDescriptions", doc, schemaString)}
}

func (_c *Ruler_MissingArgumentDescriptions_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_MissingArgumentDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_MissingArgumentDescriptions_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_MissingArgumentDescriptions_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_MissingArgumentDescriptions_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_MissingArgumentDescriptions_Call {
	_c.Call.Return(run)
	return _c
}

// MissingDeprecationReasons provides a mock function for the type Ruler
func (_mock *Ruler) MissingDeprecationReasons(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for MissingDeprecationReasons")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_MissingDeprecationReasons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MissingDeprecationReasons'
type Ruler_MissingDeprecationReasons_Call struct {
	*mock.Call
}

// MissingDeprecationReasons is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) MissingDeprecationReasons(doc interface{}, schemaString interface{}) *Ruler_MissingDeprecationReasons_Call {
	return &Ruler_MissingDeprecationReasons_Call{Call: _e.mock.On("MissingDeprecationReasons", doc, schemaString)}
}

func (_c *Ruler_MissingDeprecationReasons_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_MissingDeprecationReasons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_MissingDeprecationReasons_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_MissingDeprecationReasons_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_MissingDeprecationReasons_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_MissingDeprecationReasons_Call {
	_c.Call.Return(run)
	return _c
}

// MissingEnumValueDescriptions provides a mock function for the type Ruler
func (_mock *Ruler) MissingEnumValueDescriptions(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for MissingEnumValueDescriptions")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_MissingEnumValueDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MissingEnumValueDescriptions'
type Ruler_MissingEnumValueDescriptions_Call struct {
	*mock.Call
}

// MissingEnumValueDescriptions is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) MissingEnumValueDescriptions(doc interface{}, schemaString interface{}) *Ruler_MissingEnumValueDescriptions_Call {
	return &Ruler_MissingEnumValueDescriptions_Call{Call: _e.mock.On("MissingEnumValueDescriptions", doc, schemaString)}
}

func (_c *Ruler_MissingEnumValueDescriptions_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_MissingEnumValueDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_MissingEnumValueDescriptions_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_MissingEnumValueDescriptions_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_MissingEnumValueDescriptions_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_MissingEnumValueDescriptions_Call {
	_c.Call.Return(run)
	return _c
}

// MissingFieldDescriptions provides a mock function for the type Ruler
func (_mock *Ruler) MissingFieldDescriptions(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for MissingFieldDescriptions")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_MissingFieldDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MissingFieldDescriptions'
type Ruler_MissingFieldDescriptions_Call struct {
	*mock.Call
}

// MissingFieldDescriptions is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) MissingFieldDescriptions(doc interface{}, schemaString interface{}) *Ruler_MissingFieldDescriptions_Call {
	return &Ruler_MissingFieldDescriptions_Call{Call: _e.mock.On("MissingFieldDescriptions", doc, schemaString)}
}

func (_c *Ruler_MissingFieldDescriptions_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_MissingFieldDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_MissingFieldDescriptions_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_MissingFieldDescriptions_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_MissingFieldDescriptions_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_MissingFieldDescriptions_Call {
	_c.Call.Return(run)
	return _c
}

// MissingInputObjectValueDescriptions provides a mock function for the type Ruler
func (_mock *Ruler) MissingInputObjectValueDescriptions(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for MissingInputObjectValueDescriptions")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_MissingInputObjectValueDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MissingInputObjectValueDescriptions'
type Ruler_MissingInputObjectValueDescriptions_Call struct {
	*mock.Call
}

// MissingInputObjectValueDescriptions is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) MissingInputObjectValueDescriptions(doc interface{}, schemaString interface{}) *Ruler_MissingInputObjectValueDescriptions_Call {
	return &Ruler_MissingInputObjectValueDescriptions_Call{Call: _e.mock.On("MissingInputObjectValueDescriptions", doc, schemaString)}
}

func (_c *Ruler_MissingInputObjectValueDescriptions_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_MissingInputObjectValueDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_MissingInputObjectValueDescriptions_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_MissingInputObjectValueDescriptions_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_MissingInputObjectValueDescriptions_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_MissingInputObjectValueDescriptions_Call {
	_c.Call.Return(run)
	return _c
}

// MissingQueryRootType provides a mock function for the type Ruler
func (_mock *Ruler) MissingQueryRootType(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for MissingQueryRootType")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_MissingQueryRootType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MissingQueryRootType'
type Ruler_MissingQueryRootType_Call struct {
	*mock.Call
}

// MissingQueryRootType is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) MissingQueryRootType(doc interface{}, schemaString interface{}) *Ruler_MissingQueryRootType_Call {
	return &Ruler_MissingQueryRootType_Call{Call: _e.mock.On("MissingQueryRootType", doc, schemaString)}
}

func (_c *Ruler_MissingQueryRootType_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_MissingQueryRootType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_MissingQueryRootType_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_MissingQueryRootType_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_MissingQueryRootType_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_MissingQueryRootType_Call {
	_c.Call.Return(run)
	return _c
}

// MissingTypeDescriptions provides a mock function for the type Ruler
func (_mock *Ruler) MissingTypeDescriptions(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for MissingTypeDescriptions")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_MissingTypeDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MissingTypeDescriptions'
type Ruler_MissingTypeDescriptions_Call struct {
	*mock.Call
}

// MissingTypeDescriptions is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) MissingTypeDescriptions(doc interface{}, schemaString interface{}) *Ruler_MissingTypeDescriptions_Call {
	return &Ruler_MissingTypeDescriptions_Call{Call: _e.mock.On("MissingTypeDescriptions", doc, schemaString)}
}

func (_c *Ruler_MissingTypeDescriptions_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_MissingTypeDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_MissingTypeDescriptions_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_MissingTypeDescriptions_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_MissingTypeDescriptions_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_MissingTypeDescriptions_Call {
	_c.Call.Return(run)
	return _c
}

// RelayConnectionArgumentsSpec provides a mock function for the type Ruler
func (_mock *Ruler) RelayConnectionArgumentsSpec(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for RelayConnectionArgumentsSpec")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_RelayConnectionArgumentsSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RelayConnectionArgumentsSpec'
type Ruler_RelayConnectionArgumentsSpec_Call struct {
	*mock.Call
}

// RelayConnectionArgumentsSpec is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) RelayConnectionArgumentsSpec(doc interface{}, schemaString interface{}) *Ruler_RelayConnectionArgumentsSpec_Call {
	return &Ruler_RelayConnectionArgumentsSpec_Call{Call: _e.mock.On("RelayConnectionArgumentsSpec", doc, schemaString)}
}

func (_c *Ruler_RelayConnectionArgumentsSpec_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_RelayConnectionArgumentsSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_RelayConnectionArgumentsSpec_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_RelayConnectionArgumentsSpec_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_RelayConnectionArgumentsSpec_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_RelayConnectionArgumentsSpec_Call {
	_c.Call.Return(run)
	return _c
}

// RelayConnectionTypesSpec provides a mock function for the type Ruler
func (_mock *Ruler) RelayConnectionTypesSpec(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for RelayConnectionTypesSpec")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_RelayConnectionTypesSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RelayConnectionTypesSpec'
type Ruler_RelayConnectionTypesSpec_Call struct {
	*mock.Call
}

// RelayConnectionTypesSpec is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) RelayConnectionTypesSpec(doc interface{}, schemaString interface{}) *Ruler_RelayConnectionTypesSpec_Call {
	return &Ruler_RelayConnectionTypesSpec_Call{Call: _e.mock.On("RelayConnectionTypesSpec", doc, schemaString)}
}

func (_c *Ruler_RelayConnectionTypesSpec_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_RelayConnectionTypesSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_RelayConnectionTypesSpec_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_RelayConnectionTypesSpec_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_RelayConnectionTypesSpec_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_RelayConnectionTypesSpec_Call {
	_c.Call.Return(run)
	return _c
}

// RelayPageInfoSpec provides a mock function for the type Ruler
func (_mock *Ruler) RelayPageInfoSpec(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for RelayPageInfoSpec")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_RelayPageInfoSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RelayPageInfoSpec'
type Ruler_RelayPageInfoSpec_Call struct {
	*mock.Call
}

// RelayPageInfoSpec is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) RelayPageInfoSpec(doc interface{}, schemaString interface{}) *Ruler_RelayPageInfoSpec_Call {
	return &Ruler_RelayPageInfoSpec_Call{Call: _e.mock.On("RelayPageInfoSpec", doc, schemaString)}
}

func (_c *Ruler_RelayPageInfoSpec_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_RelayPageInfoSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_RelayPageInfoSpec_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_RelayPageInfoSpec_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_RelayPageInfoSpec_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_RelayPageInfoSpec_Call {
	_c.Call.Return(run)
	return _c
}

// ReportUncapitalizedDescription provides a mock function for the type Ruler
func (_mock *Ruler) ReportUncapitalizedDescription(kind string, parent string, name string, desc string, schemaString string) *models.DescriptionError {
	ret := _mock.Called(kind, parent, name, desc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for ReportUncapitalizedDescription")
	}

	var r0 *models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string) *models.DescriptionError); ok {
		r0 = returnFunc(kind, parent, name, desc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DescriptionError)
		}
	}
	return r0
}

// Ruler_ReportUncapitalizedDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportUncapitalizedDescription'
type Ruler_ReportUncapitalizedDescription_Call struct {
	*mock.Call
}

// ReportUncapitalizedDescription is a helper method to define mock.On call
//   - kind
//   - parent
//   - name
//   - desc
//   - schemaString
func (_e *Ruler_Expecter) ReportUncapitalizedDescription(kind interface{}, parent interface{}, name interface{}, desc interface{}, schemaString interface{}) *Ruler_ReportUncapitalizedDescription_Call {
	return &Ruler_ReportUncapitalizedDescription_Call{Call: _e.mock.On("ReportUncapitalizedDescription", kind, parent, name, desc, schemaString)}
}

func (_c *Ruler_ReportUncapitalizedDescription_Call) Run(run func(kind string, parent string, name string, desc string, schemaString string)) *Ruler_ReportUncapitalizedDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *Ruler_ReportUncapitalizedDescription_Call) Return(descriptionError *models.DescriptionError) *Ruler_ReportUncapitalizedDescription_Call {
	_c.Call.Return(descriptionError)
	return _c
}

func (_c *Ruler_ReportUncapitalizedDescription_Call) RunAndReturn(run func(kind string, parent string, name string, desc string, schemaString string) *models.DescriptionError) *Ruler_ReportUncapitalizedDescription_Call {
	_c.Call.Return(run)
	return _c
}

// TypesAreCapitalized provides a mock function for the type Ruler
func (_mock *Ruler) TypesAreCapitalized(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for TypesAreCapitalized")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_TypesAreCapitalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypesAreCapitalized'
type Ruler_TypesAreCapitalized_Call struct {
	*mock.Call
}

// TypesAreCapitalized is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) TypesAreCapitalized(doc interface{}, schemaString interface{}) *Ruler_TypesAreCapitalized_Call {
	return &Ruler_TypesAreCapitalized_Call{Call: _e.mock.On("TypesAreCapitalized", doc, schemaString)}
}

func (_c *Ruler_TypesAreCapitalized_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_TypesAreCapitalized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_TypesAreCapitalized_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_TypesAreCapitalized_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_TypesAreCapitalized_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_TypesAreCapitalized_Call {
	_c.Call.Return(run)
	return _c
}

// UnsortedFields provides a mock function for the type Ruler
func (_mock *Ruler) UnsortedFields(fieldDefs []int, getFieldName func(int) string, typeLabel string, typeName string, schemaString string) []models.DescriptionError {
	ret := _mock.Called(fieldDefs, getFieldName, typeLabel, typeName, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for UnsortedFields")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func([]int, func(int) string, string, string, string) []models.DescriptionError); ok {
		r0 = returnFunc(fieldDefs, getFieldName, typeLabel, typeName, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_UnsortedFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsortedFields'
type Ruler_UnsortedFields_Call struct {
	*mock.Call
}

// UnsortedFields is a helper method to define mock.On call
//   - fieldDefs
//   - getFieldName
//   - typeLabel
//   - typeName
//   - schemaString
func (_e *Ruler_Expecter) UnsortedFields(fieldDefs interface{}, getFieldName interface{}, typeLabel interface{}, typeName interface{}, schemaString interface{}) *Ruler_UnsortedFields_Call {
	return &Ruler_UnsortedFields_Call{Call: _e.mock.On("UnsortedFields", fieldDefs, getFieldName, typeLabel, typeName, schemaString)}
}

func (_c *Ruler_UnsortedFields_Call) Run(run func(fieldDefs []int, getFieldName func(int) string, typeLabel string, typeName string, schemaString string)) *Ruler_UnsortedFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int), args[1].(func(int) string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *Ruler_UnsortedFields_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_UnsortedFields_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_UnsortedFields_Call) RunAndReturn(run func(fieldDefs []int, getFieldName func(int) string, typeLabel string, typeName string, schemaString string) []models.DescriptionError) *Ruler_UnsortedFields_Call {
	_c.Call.Return(run)
	return _c
}

// UnusedTypes provides a mock function for the type Ruler
func (_mock *Ruler) UnusedTypes(doc *ast.Document, schemaString string) []models.DescriptionError {
	ret := _mock.Called(doc, schemaString)

	if len(ret) == 0 {
		panic("no return value specified for UnusedTypes")
	}

	var r0 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string) []models.DescriptionError); ok {
		r0 = returnFunc(doc, schemaString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DescriptionError)
		}
	}
	return r0
}

// Ruler_UnusedTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnusedTypes'
type Ruler_UnusedTypes_Call struct {
	*mock.Call
}

// UnusedTypes is a helper method to define mock.On call
//   - doc
//   - schemaString
func (_e *Ruler_Expecter) UnusedTypes(doc interface{}, schemaString interface{}) *Ruler_UnusedTypes_Call {
	return &Ruler_UnusedTypes_Call{Call: _e.mock.On("UnusedTypes", doc, schemaString)}
}

func (_c *Ruler_UnusedTypes_Call) Run(run func(doc *ast.Document, schemaString string)) *Ruler_UnusedTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string))
	})
	return _c
}

func (_c *Ruler_UnusedTypes_Call) Return(descriptionErrors []models.DescriptionError) *Ruler_UnusedTypes_Call {
	_c.Call.Return(descriptionErrors)
	return _c
}

func (_c *Ruler_UnusedTypes_Call) RunAndReturn(run func(doc *ast.Document, schemaString string) []models.DescriptionError) *Ruler_UnusedTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateEnumTypes provides a mock function for the type Ruler
func (_mock *Ruler) ValidateEnumTypes(doc *ast.Document, modelsLinterConfig *models.LinterConfig, schemaContent string, schemaPath string) ([]string, []int, []models.DescriptionError) {
	ret := _mock.Called(doc, modelsLinterConfig, schemaContent, schemaPath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateEnumTypes")
	}

	var r0 []string
	var r1 []int
	var r2 []models.DescriptionError
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, *models.LinterConfig, string, string) ([]string, []int, []models.DescriptionError)); ok {
		return returnFunc(doc, modelsLinterConfig, schemaContent, schemaPath)
	}
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, *models.LinterConfig, string, string) []string); ok {
		r0 = returnFunc(doc, modelsLinterConfig, schemaContent, schemaPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ast.Document, *models.LinterConfig, string, string) []int); ok {
		r1 = returnFunc(doc, modelsLinterConfig, schemaContent, schemaPath)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*ast.Document, *models.LinterConfig, string, string) []models.DescriptionError); ok {
		r2 = returnFunc(doc, modelsLinterConfig, schemaContent, schemaPath)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]models.DescriptionError)
		}
	}
	return r0, r1, r2
}

// Ruler_ValidateEnumTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEnumTypes'
type Ruler_ValidateEnumTypes_Call struct {
	*mock.Call
}

// ValidateEnumTypes is a helper method to define mock.On call
//   - doc
//   - modelsLinterConfig
//   - schemaContent
//   - schemaPath
func (_e *Ruler_Expecter) ValidateEnumTypes(doc interface{}, modelsLinterConfig interface{}, schemaContent interface{}, schemaPath interface{}) *Ruler_ValidateEnumTypes_Call {
	return &Ruler_ValidateEnumTypes_Call{Call: _e.mock.On("ValidateEnumTypes", doc, modelsLinterConfig, schemaContent, schemaPath)}
}

func (_c *Ruler_ValidateEnumTypes_Call) Run(run func(doc *ast.Document, modelsLinterConfig *models.LinterConfig, schemaContent string, schemaPath string)) *Ruler_ValidateEnumTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(*models.LinterConfig), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Ruler_ValidateEnumTypes_Call) Return(strings []string, ints []int, descriptionErrors []models.DescriptionError) *Ruler_ValidateEnumTypes_Call {
	_c.Call.Return(strings, ints, descriptionErrors)
	return _c
}

func (_c *Ruler_ValidateEnumTypes_Call) RunAndReturn(run func(doc *ast.Document, modelsLinterConfig *models.LinterConfig, schemaContent string, schemaPath string) ([]string, []int, []models.DescriptionError)) *Ruler_ValidateEnumTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateFieldTypes provides a mock function for the type Ruler
func (_mock *Ruler) ValidateFieldTypes(doc *ast.Document, schemaContent string, builtInScalars map[string]bool, definedTypes map[string]bool) ([]string, []int) {
	ret := _mock.Called(doc, schemaContent, builtInScalars, definedTypes)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFieldTypes")
	}

	var r0 []string
	var r1 []int
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string, map[string]bool, map[string]bool) ([]string, []int)); ok {
		return returnFunc(doc, schemaContent, builtInScalars, definedTypes)
	}
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string, map[string]bool, map[string]bool) []string); ok {
		r0 = returnFunc(doc, schemaContent, builtInScalars, definedTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ast.Document, string, map[string]bool, map[string]bool) []int); ok {
		r1 = returnFunc(doc, schemaContent, builtInScalars, definedTypes)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int)
		}
	}
	return r0, r1
}

// Ruler_ValidateFieldTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateFieldTypes'
type Ruler_ValidateFieldTypes_Call struct {
	*mock.Call
}

// ValidateFieldTypes is a helper method to define mock.On call
//   - doc
//   - schemaContent
//   - builtInScalars
//   - definedTypes
func (_e *Ruler_Expecter) ValidateFieldTypes(doc interface{}, schemaContent interface{}, builtInScalars interface{}, definedTypes interface{}) *Ruler_ValidateFieldTypes_Call {
	return &Ruler_ValidateFieldTypes_Call{Call: _e.mock.On("ValidateFieldTypes", doc, schemaContent, builtInScalars, definedTypes)}
}

func (_c *Ruler_ValidateFieldTypes_Call) Run(run func(doc *ast.Document, schemaContent string, builtInScalars map[string]bool, definedTypes map[string]bool)) *Ruler_ValidateFieldTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string), args[2].(map[string]bool), args[3].(map[string]bool))
	})
	return _c
}

func (_c *Ruler_ValidateFieldTypes_Call) Return(strings []string, ints []int) *Ruler_ValidateFieldTypes_Call {
	_c.Call.Return(strings, ints)
	return _c
}

func (_c *Ruler_ValidateFieldTypes_Call) RunAndReturn(run func(doc *ast.Document, schemaContent string, builtInScalars map[string]bool, definedTypes map[string]bool) ([]string, []int)) *Ruler_ValidateFieldTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateInputFieldTypes provides a mock function for the type Ruler
func (_mock *Ruler) ValidateInputFieldTypes(doc *ast.Document, schemaContent string, builtInScalars map[string]bool, definedTypes map[string]bool) ([]string, []int) {
	ret := _mock.Called(doc, schemaContent, builtInScalars, definedTypes)

	if len(ret) == 0 {
		panic("no return value specified for ValidateInputFieldTypes")
	}

	var r0 []string
	var r1 []int
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string, map[string]bool, map[string]bool) ([]string, []int)); ok {
		return returnFunc(doc, schemaContent, builtInScalars, definedTypes)
	}
	if returnFunc, ok := ret.Get(0).(func(*ast.Document, string, map[string]bool, map[string]bool) []string); ok {
		r0 = returnFunc(doc, schemaContent, builtInScalars, definedTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ast.Document, string, map[string]bool, map[string]bool) []int); ok {
		r1 = returnFunc(doc, schemaContent, builtInScalars, definedTypes)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int)
		}
	}
	return r0, r1
}

// Ruler_ValidateInputFieldTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateInputFieldTypes'
type Ruler_ValidateInputFieldTypes_Call struct {
	*mock.Call
}

// ValidateInputFieldTypes is a helper method to define mock.On call
//   - doc
//   - schemaContent
//   - builtInScalars
//   - definedTypes
func (_e *Ruler_Expecter) ValidateInputFieldTypes(doc interface{}, schemaContent interface{}, builtInScalars interface{}, definedTypes interface{}) *Ruler_ValidateInputFieldTypes_Call {
	return &Ruler_ValidateInputFieldTypes_Call{Call: _e.mock.On("ValidateInputFieldTypes", doc, schemaContent, builtInScalars, definedTypes)}
}

func (_c *Ruler_ValidateInputFieldTypes_Call) Run(run func(doc *ast.Document, schemaContent string, builtInScalars map[string]bool, definedTypes map[string]bool)) *Ruler_ValidateInputFieldTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Document), args[1].(string), args[2].(map[string]bool), args[3].(map[string]bool))
	})
	return _c
}

func (_c *Ruler_ValidateInputFieldTypes_Call) Return(strings []string, ints []int) *Ruler_ValidateInputFieldTypes_Call {
	_c.Call.Return(strings, ints)
	return _c
}

func (_c *Ruler_ValidateInputFieldTypes_Call) RunAndReturn(run func(doc *ast.Document, schemaContent string, builtInScalars map[string]bool, definedTypes map[string]bool) ([]string, []int)) *Ruler_ValidateInputFieldTypes_Call {
	_c.Call.Return(run)
	return _c
}
