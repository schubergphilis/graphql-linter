// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewFlagger creates a new instance of Flagger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlagger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Flagger {
	mock := &Flagger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Flagger is an autogenerated mock type for the Flagger type
type Flagger struct {
	mock.Mock
}

type Flagger_Expecter struct {
	mock *mock.Mock
}

func (_m *Flagger) EXPECT() *Flagger_Expecter {
	return &Flagger_Expecter{mock: &_m.Mock}
}

// BoolVar provides a mock function for the type Flagger
func (_mock *Flagger) BoolVar(p *bool, name string, value bool, usage string) {
	_mock.Called(p, name, value, usage)
	return
}

// Flagger_BoolVar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BoolVar'
type Flagger_BoolVar_Call struct {
	*mock.Call
}

// BoolVar is a helper method to define mock.On call
//   - p *bool
//   - name string
//   - value bool
//   - usage string
func (_e *Flagger_Expecter) BoolVar(p interface{}, name interface{}, value interface{}, usage interface{}) *Flagger_BoolVar_Call {
	return &Flagger_BoolVar_Call{Call: _e.mock.On("BoolVar", p, name, value, usage)}
}

func (_c *Flagger_BoolVar_Call) Run(run func(p *bool, name string, value bool, usage string)) *Flagger_BoolVar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *bool
		if args[0] != nil {
			arg0 = args[0].(*bool)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Flagger_BoolVar_Call) Return() *Flagger_BoolVar_Call {
	_c.Call.Return()
	return _c
}

func (_c *Flagger_BoolVar_Call) RunAndReturn(run func(p *bool, name string, value bool, usage string)) *Flagger_BoolVar_Call {
	_c.Run(run)
	return _c
}

// Parse provides a mock function for the type Flagger
func (_mock *Flagger) Parse() {
	_mock.Called()
	return
}

// Flagger_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type Flagger_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
func (_e *Flagger_Expecter) Parse() *Flagger_Parse_Call {
	return &Flagger_Parse_Call{Call: _e.mock.On("Parse")}
}

func (_c *Flagger_Parse_Call) Run(run func()) *Flagger_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Flagger_Parse_Call) Return() *Flagger_Parse_Call {
	_c.Call.Return()
	return _c
}

func (_c *Flagger_Parse_Call) RunAndReturn(run func()) *Flagger_Parse_Call {
	_c.Run(run)
	return _c
}

// StringVar provides a mock function for the type Flagger
func (_mock *Flagger) StringVar(p *string, name string, value string, usage string) {
	_mock.Called(p, name, value, usage)
	return
}

// Flagger_StringVar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StringVar'
type Flagger_StringVar_Call struct {
	*mock.Call
}

// StringVar is a helper method to define mock.On call
//   - p *string
//   - name string
//   - value string
//   - usage string
func (_e *Flagger_Expecter) StringVar(p interface{}, name interface{}, value interface{}, usage interface{}) *Flagger_StringVar_Call {
	return &Flagger_StringVar_Call{Call: _e.mock.On("StringVar", p, name, value, usage)}
}

func (_c *Flagger_StringVar_Call) Run(run func(p *string, name string, value string, usage string)) *Flagger_StringVar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *string
		if args[0] != nil {
			arg0 = args[0].(*string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Flagger_StringVar_Call) Return() *Flagger_StringVar_Call {
	_c.Call.Return()
	return _c
}

func (_c *Flagger_StringVar_Call) RunAndReturn(run func(p *string, name string, value string, usage string)) *Flagger_StringVar_Call {
	_c.Run(run)
	return _c
}
